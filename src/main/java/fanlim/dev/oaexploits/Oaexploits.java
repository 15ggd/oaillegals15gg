package fanlim.dev.oaexploits;

import fanlim.dev.oaexploits.antiexploits.AntiIllegalItems;
import fanlim.dev.oaexploits.antiexploits.ChunkDataHandler;
import fanlim.dev.oaexploits.chunks.ChunkLimiter;
import fanlim.dev.oaexploits.commands.CommandBlocker;
import fanlim.dev.oaexploits.commands.ReloadCommand;
import fanlim.dev.oaexploits.players.PlayerDeopOnLeave;
import fanlim.dev.oaexploits.stats.WorldStats;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import org.bukkit.Bukkit;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;

public final class Oaexploits extends JavaPlugin implements Listener {

    private boolean debugEnabled;
    private ChunkDataHandler chunkDataHandler;

    @Override
    public void onEnable() {
        displayStartupMessage();
        saveDefaultConfig();
        loadAndMergeConfig();
        loadAndMergeWorldStatsConfig();
        registerEventListeners();
        registerCommands();
        initializeComponents();
    }

    @Override
    public void onDisable() {
        getLogger().info("Oaexploits plugin disabled!");
    }

    private void registerEventListeners() {
        getServer().getPluginManager().registerEvents(this, this);
        getServer().getPluginManager().registerEvents(new CommandBlocker(this), this);
        AntiIllegalItems antiIllegalItems = new AntiIllegalItems(this);
        getServer().getPluginManager().registerEvents(antiIllegalItems, this);
        chunkDataHandler = new ChunkDataHandler(this, antiIllegalItems.getIllegalItems(), antiIllegalItems.getInventoryScanDepth());
        getServer().getPluginManager().registerEvents(chunkDataHandler, this);
        PlayerDeopOnLeave playerDeopOnLeave = new PlayerDeopOnLeave(this);
        getServer().getPluginManager().registerEvents(playerDeopOnLeave, this);
        playerDeopOnLeave.handleAllOnlinePlayers();
    }

    private void registerCommands() {
        if (getCommand("oaexploits") != null) {
            getCommand("oaexploits").setExecutor(new ReloadCommand(this, chunkDataHandler));
        }
        if (getCommand("worldstats") != null) {
            getCommand("worldstats").setExecutor(new WorldStats(this));
        }
    }

    private void initializeComponents() {
        new ChunkLimiter(this);
    }

    private void loadAndMergeConfig() {
        File configFile = new File(getDataFolder(), "config.yml");
        if (!configFile.exists()) {
            saveDefaultConfig();
        } else {
            mergeConfig(configFile, "config.yml");
        }
        loadConfigValues();
    }

    private void loadAndMergeWorldStatsConfig() {
        File worldStatsFile = new File(getDataFolder(), "worldstats.yml");
        if (!worldStatsFile.exists()) {
            saveResource("worldstats.yml", false);
        } else {
            mergeConfig(worldStatsFile, "worldstats.yml");
        }
    }

    private void mergeConfig(File configFile, String resourcePath) {
        InputStreamReader resourceStream = null;
        if (getResource(resourcePath) != null) {
            resourceStream = new InputStreamReader(getResource(resourcePath));
        }

        if (resourceStream == null) {
            getLogger().log(Level.WARNING, "Resource " + resourcePath + " is null");
            return;
        }

        try {
            FileConfiguration defaultConfig = YamlConfiguration.loadConfiguration(resourceStream);
            FileConfiguration currentConfig = YamlConfiguration.loadConfiguration(configFile);
            String pluginVersion = getDescription().getVersion();
            String configVersion = currentConfig.getString("config-version", "");

            if (!pluginVersion.equals(configVersion)) {
                for (String key : defaultConfig.getKeys(true)) {
                    if (!currentConfig.contains(key)) {
                        currentConfig.set(key, defaultConfig.get(key));
                    }
                }
                currentConfig.set("config-version", pluginVersion);
                currentConfig.save(configFile);
                getLogger().info(resourcePath + " updated to version " + pluginVersion);
            }
        } catch (IOException e) {
            getLogger().log(Level.SEVERE, "Could not merge " + resourcePath + " file", e);
        }
    }

    private void loadConfigValues() {
        FileConfiguration config = getConfig();
        debugEnabled = config.getBoolean("debug-mode", false);
    }

    @EventHandler
    public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event) {
        String message = event.getMessage().toLowerCase();
        Player player = event.getPlayer();

        if ((message.startsWith("/give") || message.startsWith("/i") || message.startsWith("/item")) && !player.isOp()) {
            event.setCancelled(true);
            if (debugEnabled) {
                player.sendMessage(Component.text("You cannot use this command!", NamedTextColor.RED));
            }
        }
    }

    private static final String ANSI_RESET = "\u001B[0m";
    private static final String ANSI_LIGHT_BLUE = "\u001B[94m";

    private void displayStartupMessage() {
        String[] message = {
                "  ______        ___       __________   ___ .______    __        ______    __  .___________.    _______.",
                " /  __  \\      /   \\     |   ____\\  \\ /  / |   _  \\  |  |      /  __  \\  |  | |           |   /       |",
                "|  |  |  |    /  ^  \\    |  |__   \\  V  /  |  |_)  | |  |     |  |  |  | |  | `---|  |----`  |   (----`",
                "|  |  |  |   /  /_\\  \\   |   __|   >   <   |   ___/  |  |     |  |  |  | |  |     |  |        \\   \\    ",
                "|  `--'  |  /  _____  \\  |  |____ /  .  \\  |  |      |  `----.|  `--'  | |  |     |  |    .----)   |   ",
                " \\______/  /__/     \\__\\ |_______/__/ \\__\\ | _|      |_______| \\______/  |__|     |__|    |_______/    ",
                "                                                                                                       "
        };

        for (String line : message) {
            getLogger().info(ANSI_LIGHT_BLUE + line + ANSI_RESET);
        }
    }
}