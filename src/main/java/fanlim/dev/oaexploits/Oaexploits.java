package fanlim.dev.oaexploits;

import fanlim.dev.oaexploits.antiexploits.AntiIllegalItems;
import fanlim.dev.oaexploits.antiexploits.ChunkDataHandler;
import fanlim.dev.oaexploits.chunks.ChunkLimiter;
import fanlim.dev.oaexploits.commands.CommandBlocker;
import fanlim.dev.oaexploits.commands.ReloadCommand;
import fanlim.dev.oaexploits.players.PlayerDeopOnLeave;
import fanlim.dev.oaexploits.stats.WorldStats;
import net.md_5.bungee.api.ChatColor; // Updated import
import org.bukkit.Bukkit;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.stream.Collectors;

public final class Oaexploits extends JavaPlugin implements Listener {

    private String blockPlaceMessage;
    private String commandBlockedMessage;
    private String pluginsCommandBlockedMessage;
    private boolean whitelistEnabled;
    private Set<String> commandWhitelist = new HashSet<>();
    private boolean blacklistEnabled;
    private Set<String> commandBlacklist = new HashSet<>();
    private boolean debugEnabled;
    private boolean removeIllegalItemsEnabled;
    private boolean removeOverleveledEnchantmentsEnabled;
    private FileConfiguration worldStatsConfig;
    private ChunkLimiter chunkLimiter;
    private PlayerDeopOnLeave playerDeopOnLeave;
    private ChunkDataHandler chunkDataHandler;

    @Override
    public void onEnable() {
        // Display ASCII art message
        displayStartupMessage();

        // Save default config if not already present
        saveDefaultConfig();
        loadAndMergeConfig();

        // Load and merge the worldstats.yml configuration
        loadAndMergeWorldStatsConfig();

        // Register event listeners
        getServer().getPluginManager().registerEvents(this, this);
        getLogger().info("Oaexploits plugin enabled!");

        // Register the chunk limiter
        chunkLimiter = new ChunkLimiter(this);

        // Register the reload command executor
        if (this.getCommand("oaexploits") != null) {
            this.getCommand("oaexploits").setExecutor(new ReloadCommand(this, chunkLimiter));
        }

        // Register the worldstats command executor
        if (this.getCommand("worldstats") != null) {
            this.getCommand("worldstats").setExecutor(new WorldStats(this));
        }

        // Register the command blocking handler
        getServer().getPluginManager().registerEvents(new CommandBlocker(this), this);

        // Register AntiIllegalItems listener
        AntiIllegalItems antiIllegalItems = new AntiIllegalItems(this);
        getServer().getPluginManager().registerEvents(antiIllegalItems, this);

        // Initialize and handle ChunkDataHandler
        chunkDataHandler = new ChunkDataHandler(this, antiIllegalItems.getIllegalItems(), antiIllegalItems.getInventoryScanDepth());

        // Register and handle PlayerDeopOnLeave
        playerDeopOnLeave = new PlayerDeopOnLeave(this);
        getServer().getPluginManager().registerEvents(playerDeopOnLeave, this);
        playerDeopOnLeave.handleAllOnlinePlayers();
    }

    @Override
    public void onDisable() {
        getLogger().info("Oaexploits plugin disabled!");
    }

    private void loadAndMergeConfig() {
        File configFile = new File(getDataFolder(), "config.yml");
        if (!configFile.exists()) {
            saveDefaultConfig();
        } else {
            try {
                FileConfiguration defaultConfig = YamlConfiguration.loadConfiguration(new InputStreamReader(getResource("config.yml")));
                FileConfiguration currentConfig = YamlConfiguration.loadConfiguration(configFile);

                // Get the plugin version from plugin.yml
                String pluginVersion = getDescription().getVersion();
                String configVersion = currentConfig.getString("config-version", "");

                if (!pluginVersion.equals(configVersion)) {
                    for (String key : defaultConfig.getKeys(true)) {
                        if (!currentConfig.contains(key)) {
                            currentConfig.set(key, defaultConfig.get(key));
                        }
                    }
                    currentConfig.set("config-version", pluginVersion); // Update config version
                    currentConfig.save(configFile);
                    getLogger().info("Configuration updated to version " + pluginVersion);
                }
            } catch (IOException e) {
                getLogger().log(Level.SEVERE, "Could not merge configuration file", e);
            }
        }
        loadConfigValues();
    }

    public void loadAndMergeWorldStatsConfig() {
        File worldStatsFile = new File(getDataFolder(), "worldstats.yml");
        if (!worldStatsFile.exists()) {
            saveResource("worldstats.yml", false);
        } else {
            try {
                FileConfiguration defaultConfig = YamlConfiguration.loadConfiguration(new InputStreamReader(getResource("worldstats.yml")));
                FileConfiguration currentConfig = YamlConfiguration.loadConfiguration(worldStatsFile);

                // Get the plugin version from plugin.yml
                String pluginVersion = getDescription().getVersion();
                String configVersion = currentConfig.getString("config-version", "");

                if (!pluginVersion.equals(configVersion)) {
                    for (String key : defaultConfig.getKeys(true)) {
                        if (!currentConfig.contains(key)) {
                            currentConfig.set(key, defaultConfig.get(key));
                        }
                    }
                    currentConfig.set("config-version", pluginVersion); // Update config version
                    currentConfig.save(worldStatsFile);
                    getLogger().info("World stats configuration updated to version " + pluginVersion);
                }
            } catch (IOException e) {
                getLogger().log(Level.SEVERE, "Could not merge world stats configuration file", e);
            }
        }
        worldStatsConfig = YamlConfiguration.loadConfiguration(worldStatsFile);
    }

    public void loadConfigValues() {
        FileConfiguration config = getConfig();

        blockPlaceMessage = ChatColor.translateAlternateColorCodes('&', config.getString("messages.block-place.text", "&cYou cannot place that block!"));
        commandBlockedMessage = ChatColor.translateAlternateColorCodes('&', config.getString("messages.command-blocked.text", "&cYou cannot use this command!"));
        pluginsCommandBlockedMessage = ChatColor.translateAlternateColorCodes('&', config.getString("messages.plugins-command-blocked.text", "&cYou cannot view the plugins!"));

        whitelistEnabled = config.getBoolean("command-whitelist.enabled", false);
        commandWhitelist = normalizeCommands(config.getStringList("command-whitelist.commands"));

        blacklistEnabled = config.getBoolean("command-blacklist.enabled", true);
        commandBlacklist = normalizeCommands(config.getStringList("command-blacklist.commands"));

        debugEnabled = config.getBoolean("debug-mode", false);
        removeIllegalItemsEnabled = config.getBoolean("removal-options.remove-illegal-items", true);
        removeOverleveledEnchantmentsEnabled = config.getBoolean("removal-options.remove-overleveled-enchantments", true);
    }

    public FileConfiguration getWorldStatsConfig() {
        return worldStatsConfig;
    }

    private Set<String> normalizeCommands(List<String> commands) {
        return commands.stream()
                .map(command -> command.trim().replaceAll("^/+", "").toLowerCase())
                .collect(Collectors.toSet());
    }

    @EventHandler
    public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event) {
        String message = event.getMessage().toLowerCase();
        Player player = event.getPlayer();

        if ((message.startsWith("/give") || message.startsWith("/i") || message.startsWith("/item")) && !player.isOp()) {
            event.setCancelled(true);
            if (debugEnabled) {
                player.sendMessage(commandBlockedMessage);
            }
        }
    }

    private void logAndAlert(String playerName, String action) {
        String message = "Player " + playerName + " " + action;
        getLogger().warning(message);
        alertAdmins(message);
    }

    private void alertAdmins(String message) {
        Bukkit.getOnlinePlayers().stream()
                .filter(player -> player.hasPermission("oaexploits.alerts"))
                .forEach(player -> player.sendMessage(ChatColor.RED + message));
    }

    private static final String ANSI_RESET = "\u001B[0m";
    private static final String ANSI_LIGHT_BLUE = "\u001B[94m";

    private void displayStartupMessage() {
        String[] message = {
                "  ______        ___       __________   ___ .______    __        ______    __  .___________.    _______.",
                " /  __  \\      /   \\     |   ____\\  \\ /  / |   _  \\  |  |      /  __  \\  |  | |           |   /       |",
                "|  |  |  |    /  ^  \\    |  |__   \\  V  /  |  |_)  | |  |     |  |  |  | |  | `---|  |----`  |   (----`",
                "|  |  |  |   /  /_\\  \\   |   __|   >   <   |   ___/  |  |     |  |  |  | |  |     |  |        \\   \\    ",
                "|  `--'  |  /  _____  \\  |  |____ /  .  \\  |  |      |  `----.|  `--'  | |  |     |  |    .----)   |   ",
                " \\______/  /__/     \\__\\ |_______/__/ \\__\\ | _|      |_______| \\______/  |__|     |__|    |_______/    ",
                "                                                                                                       "
        };

        for (String line : message) {
            getLogger().info(ANSI_LIGHT_BLUE + line + ANSI_RESET);
        }
    }

    public String getPluginsCommandBlockedMessage() {
        return pluginsCommandBlockedMessage;
    }

    public boolean isWhitelistEnabled() {
        return whitelistEnabled;
    }

    public Set<String> getCommandWhitelist() {
        return commandWhitelist;
    }

    public boolean isBlacklistEnabled() {
        return blacklistEnabled;
    }

    public Set<String> getCommandBlacklist() {
        return commandBlacklist;
    }

    public boolean isDebugEnabled() {
        return debugEnabled;
    }

    public boolean isRemoveIllegalItemsEnabled() {
        return removeIllegalItemsEnabled;
    }

    public boolean isRemoveOverleveledEnchantmentsEnabled() {
        return removeOverleveledEnchantmentsEnabled;
    }
}
