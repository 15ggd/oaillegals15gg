package fanlim.dev.oaexploits.antiexploits;

import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

public class EnchantedItems {

    private static final Logger LOGGER = Logger.getLogger(EnchantedItems.class.getName());
    private final Map<Enchantment, Integer> customMaxLevels;

    // Default constructor
    public EnchantedItems() {
        this.customMaxLevels = new HashMap<>();
    }

    // Constructor with custom max levels
    public EnchantedItems(Map<Enchantment, Integer> customMaxLevels) {
        this.customMaxLevels = customMaxLevels != null ? customMaxLevels : new HashMap<>();
    }

    public boolean hasOverleveledEnchantments(ItemStack item) {
        try {
            ItemMeta meta = item.getItemMeta();
            if (meta != null && meta.hasEnchants()) {
                for (Map.Entry<Enchantment, Integer> enchantment : meta.getEnchants().entrySet()) {
                    int maxLevel = customMaxLevels.getOrDefault(enchantment.getKey(), enchantment.getKey().getMaxLevel());
                    if (enchantment.getValue() > maxLevel) {
                        LOGGER.log(Level.WARNING, "Item has overleveled enchantment: " + enchantment.getKey().getName() +
                                " Level: " + enchantment.getValue() + " Max Level: " + maxLevel);
                        return true;
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Error checking enchantments", e);
        }
        return false;
    }

    public void removeOverleveledEnchantments(ItemStack item) {
        try {
            ItemMeta meta = item.getItemMeta();
            if (meta != null && meta.hasEnchants()) {
                boolean modified = false;
                for (Map.Entry<Enchantment, Integer> enchantment : meta.getEnchants().entrySet()) {
                    int maxLevel = customMaxLevels.getOrDefault(enchantment.getKey(), enchantment.getKey().getMaxLevel());
                    if (enchantment.getValue() > maxLevel) {
                        meta.removeEnchant(enchantment.getKey());
                        meta.addEnchant(enchantment.getKey(), maxLevel, true);
                        modified = true;
                    }
                }
                if (modified) {
                    item.setItemMeta(meta);
                    LOGGER.log(Level.INFO, "Overleveled enchantments removed and set to max levels.");
                }
            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Error removing overleveled enchantments", e);
        }
    }

    public Map<Enchantment, Integer> getCustomMaxLevels() {
        return new HashMap<>(customMaxLevels);
    }

    public void setCustomMaxLevel(Enchantment enchantment, int level) {
        if (level > 0) {
            customMaxLevels.put(enchantment, level);
        } else {
            customMaxLevels.remove(enchantment);
        }
    }
}
