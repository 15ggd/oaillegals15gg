package fanlim.dev.oaexploits.antiexploits;

import fanlim.dev.oaexploits.Oaexploits;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.block.ShulkerBox;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.*;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.title.Title;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import org.bukkit.ChatColor;

public class AntiIllegalItems implements Listener {

    private final Oaexploits plugin;
    private final Set<Material> illegalItems = ConcurrentHashMap.newKeySet();
    private final Set<UUID> onlinePlayers = ConcurrentHashMap.newKeySet();
    private int inventoryScanDepth;
    private boolean adminAlertsEnabled;
    private int adminAlertCooldown;
    private long lastAdminAlertTime;
    private boolean removeIllegalItemsEnabled;
    private boolean cleanShulkersOnPlaceEnabled;
    private boolean notifyPlayerOnIllegalPlacementEnabled;
    private String illegalItemPlacementTitle;
    private String illegalItemPlacementSubtitle;
    private String illegalItemInteractionTitle;
    private String illegalItemInteractionSubtitle;
    private String illegalItemMovementSubtitle;
    private String illegalItemRemovalTitle;
    private String illegalItemRemovalSubtitle;
    private String adminAlertMessage;

    public AntiIllegalItems(Oaexploits plugin) {
        this.plugin = plugin;
        loadConfigValues();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    private void loadConfigValues() {
        FileConfiguration config = plugin.getConfig();
        loadIllegalItems(config.getStringList("illegal-items.blocks"));
        loadIllegalItems(config.getStringList("illegal-items.items"));

        inventoryScanDepth = config.getInt("additional-configs.inventory-scan-depth", 3);
        adminAlertsEnabled = config.getBoolean("admin-alerts.enabled", true);
        adminAlertCooldown = config.getInt("admin-alerts.cooldown", 60);
        lastAdminAlertTime = 0;

        removeIllegalItemsEnabled = config.getBoolean("removal-options.remove-illegal-items", true);
        cleanShulkersOnPlaceEnabled = config.getBoolean("removal-options.clean-shulkers-on-place", true);
        notifyPlayerOnIllegalPlacementEnabled = config.getBoolean("removal-options.notify-player-on-illegal-placement", true);

        illegalItemPlacementTitle = ChatColor.translateAlternateColorCodes('&', config.getString("messages.illegal-item-placement.title", "&cIllegal Block!"));
        illegalItemPlacementSubtitle = ChatColor.translateAlternateColorCodes('&', config.getString("messages.illegal-item-placement.subtitle", "&cYou cannot place that block!"));
        illegalItemInteractionTitle = ChatColor.translateAlternateColorCodes('&', config.getString("messages.illegal-item-interaction.title", "&cIllegal Item!"));
        illegalItemInteractionSubtitle = ChatColor.translateAlternateColorCodes('&', config.getString("messages.illegal-item-interaction.subtitle", "&cYou tried to interact with an illegal item: %item%"));
        illegalItemMovementSubtitle = ChatColor.translateAlternateColorCodes('&', config.getString("messages.illegal-item-movement.subtitle", "&cContainer tried to move an illegal item: %item%"));
        illegalItemRemovalTitle = ChatColor.translateAlternateColorCodes('&', config.getString("messages.illegal-item-removal.title", "&cIllegal Items Removed!"));
        illegalItemRemovalSubtitle = ChatColor.translateAlternateColorCodes('&', config.getString("messages.illegal-item-removal.subtitle", "&cIllegal items were removed from your inventory."));
        adminAlertMessage = ChatColor.translateAlternateColorCodes('&', config.getString("messages.admin-alert", "&c%player% tried to interact with an illegal item: %item%"));
    }

    private void loadIllegalItems(List<String> itemNames) {
        for (String itemName : itemNames) {
            try {
                Material material = Material.valueOf(itemName.toUpperCase());
                illegalItems.add(material);
            } catch (IllegalArgumentException e) {
                plugin.getLogger().warning("Invalid item name in config: " + itemName);
            }
        }
    }

    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        handleItemInteraction(event.getCurrentItem(), (Player) event.getWhoClicked());
    }

    @EventHandler
    public void onInventoryMoveItem(InventoryMoveItemEvent event) {
        handleItemMovement(event.getItem(), event.getSource(), event.getDestination());
    }

    @EventHandler
    public void onInventoryOpen(InventoryOpenEvent event) {
        handleInventoryOpen(event.getInventory(), (Player) event.getPlayer());
    }

    @EventHandler
    public void onInventoryPickupItem(InventoryPickupItemEvent event) {
        handleItemInteraction(event.getItem().getItemStack(), "Container");
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        UUID playerId = event.getPlayer().getUniqueId();
        onlinePlayers.add(playerId);
        checkPlayerInventory(event.getPlayer());
    }

    @EventHandler
    public void onPlayerQuit(PlayerQuitEvent event) {
        onlinePlayers.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event) {
        handlePlayerInteract(event);
    }

    @EventHandler
    public void onPlayerItemHeld(PlayerItemHeldEvent event) {
        handleItemInteraction(event.getPlayer().getInventory().getItem(event.getNewSlot()), event.getPlayer());
    }

    @EventHandler
    public void onPlayerDropItem(PlayerDropItemEvent event) {
        handleItemInteraction(event.getItemDrop().getItemStack(), event.getPlayer());
    }

    @EventHandler
    public void onBlockPlace(BlockPlaceEvent event) {
        handleBlockPlace(event);
    }

    @EventHandler
    private void handleEntityPickup(EntityPickupItemEvent event) {
        Entity entity = event.getEntity();
        ItemStack item = event.getItem().getItemStack();

        if (shouldRemoveItem(item)) {
            int removedCount = item.getAmount();
            Material itemType = item.getType();
            String itemTypeString = new String(itemType.toString());
            removeItem(item);
            alertAdminsIfPlayer(entity, itemTypeString);
            plugin.getLogger().info("\u001B[31mRemoved " + removedCount + " illegal items from entity pickup by " + entity.getName());
        }
    }

    private void handleItemInteraction(ItemStack item, Player player) {
        if (item != null && shouldRemoveItem(item)) {
            int removedCount = item.getAmount();
            Material itemType = item.getType();
            String itemTypeString = new String(itemType.toString());
            removeItem(item);
            notifyPlayerAndAdmins(player, illegalItemInteractionTitle, illegalItemInteractionSubtitle.replace("%item%", itemTypeString), itemTypeString);
            plugin.getLogger().info("\u001B[31mRemoved " + removedCount + " illegal items from player " + player.getName());
        }
    }

    private void handleItemInteraction(ItemStack item, String entityName) {
        Player player = Bukkit.getPlayer(entityName);
        if (player != null) {
            handleItemInteraction(item, player);
        }
    }

    private void handleItemMovement(ItemStack item, Inventory source, Inventory destination) {
        if (item != null && shouldRemoveItem(item)) {
            int removedCount = item.getAmount();
            Material itemType = item.getType();
            String itemTypeString = new String(itemType.toString());
            removeItem(item);
            alertAdmins(illegalItemMovementSubtitle.replace("%item%", itemTypeString));
            plugin.getLogger().info("\u001B[31mRemoved " + removedCount + " illegal items during item movement");
        }
        removeIllegalItems(source, inventoryScanDepth);
        removeIllegalItems(destination, inventoryScanDepth);
    }

    private void handleInventoryOpen(Inventory inventory, Player player) {
        int removedCount = removeIllegalItems(inventory, inventoryScanDepth);
        if (removedCount > 0) {
            notifyPlayerAndAdmins(player, illegalItemRemovalTitle, illegalItemRemovalSubtitle, null);
            plugin.getLogger().info("\u001B[31mRemoved " + removedCount + " illegal items from inventory of player " + player.getName());
        }
    }

    private void handlePlayerInteract(PlayerInteractEvent event) {
        Action action = event.getAction();
        Player player = event.getPlayer();
        ItemStack item = event.getItem();

        switch (action) {
            case RIGHT_CLICK_BLOCK:
            case RIGHT_CLICK_AIR:
            case LEFT_CLICK_BLOCK:
            case LEFT_CLICK_AIR:
                if (player.isSneaking() && isShulkerBox(item)) {
                    handleShulkerBoxContents(item);
                }
                break;
            default:
                break;
        }
    }

    private void handleShulkerBoxContents(ItemStack item) {
        if (!removeIllegalItemsEnabled) return;

        BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
        if (meta != null && meta.getBlockState() instanceof ShulkerBox shulker) {
            int removedCount = removeIllegalItems(shulker.getInventory(), inventoryScanDepth - 1);
            if (removedCount > 0) {
                meta.setBlockState(shulker);
                item.setItemMeta(meta);
                plugin.getLogger().info("\u001B[31mRemoved " + removedCount + " illegal items from a Shulker Box.");
            }
        }
    }

    private void handleBlockPlace(BlockPlaceEvent event) {
        Player player = event.getPlayer();
        ItemStack item = event.getItemInHand();
        Material blockType = event.getBlock().getType();

        if (shouldRemoveItem(item) || isIllegalBlock(blockType)) {
            event.setCancelled(true);
            int removedCount = item.getAmount();
            Material itemType = item.getType();
            String itemTypeString = new String(itemType.toString());
            removeItem(item);
            notifyPlayerAndAdmins(player, illegalItemPlacementTitle, illegalItemPlacementSubtitle.replace("%item%", blockType.toString()), itemTypeString);
            plugin.getLogger().info("\u001B[31mRemoved " + removedCount + " illegal items from player " + player.getName());
        } else if (isShulkerBox(item) && cleanShulkersOnPlaceEnabled) {
            handleShulkerBoxContents(item);
        }
    }

    private boolean isIllegalBlock(Material blockType) {
        return illegalItems.contains(blockType);
    }

    private void checkPlayerInventory(Player player) {
        int removedCount = removeIllegalItems(player.getInventory(), inventoryScanDepth);
        if (removedCount > 0) {
            notifyPlayerAndAdmins(player, illegalItemRemovalTitle, illegalItemRemovalSubtitle, null);
            plugin.getLogger().info("\u001B[31mRemoved " + removedCount + " illegal items from player " + player.getName());
        }
    }

    private int removeIllegalItems(Inventory inventory, int depth) {
        if (depth < 1) return 0;

        int removedCount = 0;
        for (ItemStack item : inventory.getContents()) {
            if (item != null) {
                if (shouldRemoveItem(item)) {
                    removedCount += item.getAmount();
                    removeItem(item);
                } else if (isShulkerBox(item) && depth > 1) {
                    removedCount += removeShulkerBoxContents(item, depth);
                }
            }
        }
        return removedCount;
    }

    private int removeShulkerBoxContents(ItemStack item, int depth) {
        BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
        int removedCount = 0;

        if (meta != null && meta.getBlockState() instanceof ShulkerBox shulker) {
            removedCount = removeIllegalItems(shulker.getInventory(), depth - 1);
            if (removedCount > 0) {
                meta.setBlockState(shulker);
                item.setItemMeta(meta);
            }
        }

        return removedCount;
    }

    private void removeItem(ItemStack item) {
        item.setAmount(0);
    }

    private boolean isIllegalItem(ItemStack item) {
        return item != null && illegalItems.contains(item.getType());
    }

    private boolean shouldRemoveItem(ItemStack item) {
        return removeIllegalItemsEnabled && isIllegalItem(item);
    }

    private void alertAdmins(String message) {
        long currentTime = System.currentTimeMillis() / 1000;
        if (adminAlertsEnabled && currentTime - lastAdminAlertTime >= adminAlertCooldown) {
            lastAdminAlertTime = currentTime;
            Bukkit.getOnlinePlayers().stream()
                    .filter(player -> player.hasPermission("oaexploits.alerts"))
                    .forEach(player -> player.sendMessage(message));
        }
    }

    private void alertAdminsIfPlayer(Entity entity, String itemType) {
        if (entity instanceof Player player) {
            String message = adminAlertMessage.replace("%player%", player.getName()).replace("%item%", itemType);
            alertAdmins(message);
        }
    }

    private void notifyPlayerAndAdmins(Player player, String title, String subtitle, String itemType) {
        if (player != null && notifyPlayerOnIllegalPlacementEnabled) {
            String subtitleMessage = subtitle;
            if (itemType != null) {
                subtitleMessage = subtitle.replace("%item%", itemType);
            }
            sendTitleToPlayer(player, title, subtitleMessage);
            String adminMessage = adminAlertMessage.replace("%player%", player.getName()).replace("%item%", itemType != null ? itemType : "");
            alertAdmins(adminMessage);
        }
    }

    private void sendTitleToPlayer(Player player, String title, String subtitle) {
        Component titleComponent = Component.text(title);
        Component subtitleComponent = Component.text(subtitle);
        Title playerTitle = Title.title(titleComponent, subtitleComponent);
        player.showTitle(playerTitle);
    }

    public Set<Material> getIllegalItems() {
        return illegalItems;
    }

    public int getInventoryScanDepth() {
        return inventoryScanDepth;
    }

    public void reloadConfigValues() {
        plugin.reloadConfig();
        loadConfigValues();
        plugin.getLogger().info("AntiIllegalItems configuration reloaded.");
    }

    private boolean isShulkerBox(ItemStack item) {
        return item != null && item.getType().toString().endsWith("_SHULKER_BOX");
    }
}
