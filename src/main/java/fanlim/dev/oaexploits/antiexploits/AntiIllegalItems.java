package fanlim.dev.oaexploits.antiexploits;

import fanlim.dev.oaexploits.Oaexploits;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.block.BlockState;
import org.bukkit.block.ShulkerBox;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.*;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

public class AntiIllegalItems implements Listener {

    private final Oaexploits plugin;
    private final Set<Material> illegalItems = ConcurrentHashMap.newKeySet();
    private final Set<UUID> onlinePlayers = ConcurrentHashMap.newKeySet();
    private int inventoryScanDepth;
    private boolean adminAlertsEnabled;
    private int adminAlertCooldown;
    private long lastAdminAlertTime;
    private boolean removeIllegalItemsEnabled;
    private boolean removeOverleveledEnchantmentsEnabled;
    private final ChunkDataHandler chunkDataHandler;
    private final EnchantedItems enchantedItems;

    public AntiIllegalItems(Oaexploits plugin) {
        this.plugin = plugin;
        loadConfigValues();
        chunkDataHandler = new ChunkDataHandler(plugin, illegalItems, inventoryScanDepth);
        enchantedItems = new EnchantedItems();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    public void loadConfigValues() {
        FileConfiguration config = plugin.getConfig();
        loadIllegalItems(config.getStringList("illegal-items.blocks"));
        loadIllegalItems(config.getStringList("illegal-items.items"));

        inventoryScanDepth = config.getInt("additional-configs.inventory-scan-depth", 3);
        adminAlertsEnabled = config.getBoolean("admin-alerts.enabled", true);
        adminAlertCooldown = config.getInt("admin-alerts.cooldown", 60);
        lastAdminAlertTime = 0;

        removeIllegalItemsEnabled = config.getBoolean("removal-options.remove-illegal-items", true);
        removeOverleveledEnchantmentsEnabled = config.getBoolean("removal-options.remove-overleveled-enchantments", true);
    }

    private void loadIllegalItems(List<String> itemNames) {
        for (String itemName : itemNames) {
            try {
                Material material = Material.valueOf(itemName.toUpperCase());
                illegalItems.add(material);
            } catch (IllegalArgumentException e) {
                plugin.getLogger().warning("Invalid item name in config: " + itemName);
            }
        }
    }

    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        handleItemInteraction(event.getCurrentItem(), event.getWhoClicked().getName());
    }

    @EventHandler
    public void onInventoryMoveItem(InventoryMoveItemEvent event) {
        handleItemMovement(event.getItem(), event.getSource(), event.getDestination());
    }

    @EventHandler
    public void onInventoryOpen(InventoryOpenEvent event) {
        handleInventoryOpen(event.getInventory(), event.getPlayer().getName());
    }

    @EventHandler
    public void onInventoryPickupItem(InventoryPickupItemEvent event) {
        handleItemInteraction(event.getItem().getItemStack(), "Container");
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        UUID playerId = event.getPlayer().getUniqueId();
        onlinePlayers.add(playerId);
        checkPlayerInventory(event.getPlayer());
    }

    @EventHandler
    public void onPlayerQuit(PlayerQuitEvent event) {
        onlinePlayers.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event) {
        handlePlayerInteract(event);
    }

    @EventHandler
    public void onPlayerItemHeld(PlayerItemHeldEvent event) {
        handleItemInteraction(event.getPlayer().getInventory().getItem(event.getNewSlot()), event.getPlayer().getName());
    }

    @EventHandler
    public void onPlayerDropItem(PlayerDropItemEvent event) {
        handleItemInteraction(event.getItemDrop().getItemStack(), event.getPlayer().getName());
    }

    @EventHandler
    public void onBlockPlace(BlockPlaceEvent event) {
        handleBlockPlace(event);
    }

    @EventHandler
    public void onEntityPickupItem(EntityPickupItemEvent event) {
        handleEntityPickup(event);
    }

    private void handleEntityPickup(EntityPickupItemEvent event) {
        Entity entity = event.getEntity();
        ItemStack item = event.getItem().getItemStack();

        if (shouldRemoveItem(item)) {
            removeItem(item);
            if (entity instanceof Player) {
                Player player = (Player) entity;
                alertAdmins(player.getName() + " tried to pick up an illegal item: " + item.getType());
            }
        }
    }

    private void handleItemInteraction(ItemStack item, String playerName) {
        if (item != null && shouldRemoveItem(item)) {
            removeItem(item);
            alertAdmins(playerName + " tried to interact with an illegal item: " + item.getType());
        }
    }

    private void handleItemMovement(ItemStack item, Inventory source, Inventory destination) {
        if (item != null && shouldRemoveItem(item)) {
            removeItem(item);
            alertAdmins("Container tried to move an illegal item: " + item.getType());
        }
        removeIllegalItems(source, inventoryScanDepth);
        removeIllegalItems(destination, inventoryScanDepth);
    }

    private void handleInventoryOpen(Inventory inventory, String playerName) {
        boolean itemsRemoved = removeIllegalItems(inventory, inventoryScanDepth);
        if (itemsRemoved) {
            alertAdmins(playerName + " had illegal items removed from a container.");
        }
    }

    private void handlePlayerInteract(PlayerInteractEvent event) {
        Action action = event.getAction();
        Player player = event.getPlayer();
        ItemStack item = event.getItem();

        if (isRightOrLeftClick(action) && player.isSneaking() && item != null && item.getType().toString().endsWith("_SHULKER_BOX")) {
            BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
            if (meta != null && meta.getBlockState() instanceof ShulkerBox shulker) {
                removeIllegalItems(shulker.getInventory(), inventoryScanDepth - 1);
                meta.setBlockState(shulker);
                item.setItemMeta(meta);
            }
        }
    }

    private boolean isRightOrLeftClick(Action action) {
        return action == Action.RIGHT_CLICK_BLOCK || action == Action.RIGHT_CLICK_AIR ||
                action == Action.LEFT_CLICK_BLOCK || action == Action.LEFT_CLICK_AIR;
    }

    private void handleBlockPlace(BlockPlaceEvent event) {
        Player player = event.getPlayer();
        ItemStack item = event.getItemInHand();
        Material blockType = event.getBlock().getType();

        if (shouldRemoveItem(item)) {
            removeItem(item);
            alertAdmins(player.getName() + " tried to place an illegal item: " + item.getType());
            event.setCancelled(true); // Prevent block placement
        } else if (item.getType().toString().endsWith("_SHULKER_BOX")) {
            BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
            if (meta != null && meta.getBlockState() instanceof ShulkerBox shulker) {
                removeIllegalItems(shulker.getInventory(), inventoryScanDepth - 1);
                meta.setBlockState(shulker);
                item.setItemMeta(meta);
            }
        } else if (isIllegalBlock(blockType)) {
            event.setCancelled(true);
            player.sendMessage(ChatColor.RED + "You cannot place that block!");
        }
    }

    private boolean isIllegalBlock(Material blockType) {
        return illegalItems.contains(blockType);
    }

    private void checkPlayerInventory(Player player) {
        boolean itemsRemoved = removeIllegalItems(player.getInventory(), inventoryScanDepth);
        if (itemsRemoved) {
            alertAdmins(player.getName() + " had illegal items removed from their inventory.");
        }
    }

    private boolean removeIllegalItems(Inventory inventory, int depth) {
        if (depth < 1) return false;

        boolean itemsRemoved = false;
        ItemStack[] contents = inventory.getContents();
        for (ItemStack item : contents) {
            if (item != null) {
                if (shouldRemoveItem(item)) {
                    removeItem(item);
                    itemsRemoved = true;
                } else if (item.getType().toString().endsWith("_SHULKER_BOX") && depth > 1) {
                    itemsRemoved |= removeShulkerBoxContents(item, depth);
                }
            }
        }
        inventory.setContents(contents);
        return itemsRemoved;
    }

    private boolean removeShulkerBoxContents(ItemStack item, int depth) {
        BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
        if (meta != null && meta.getBlockState() instanceof ShulkerBox shulker) {
            boolean nestedItemsRemoved = removeIllegalItems(shulker.getInventory(), depth - 1);
            if (nestedItemsRemoved) {
                meta.setBlockState(shulker);
                item.setItemMeta(meta);
            }
            return nestedItemsRemoved;
        }
        return false;
    }

    private void removeItem(ItemStack item) {
        item.setAmount(0);
    }

    private boolean isIllegalItem(ItemStack item) {
        return item != null && illegalItems.contains(item.getType());
    }

    private boolean shouldRemoveItem(ItemStack item) {
        return (removeIllegalItemsEnabled && isIllegalItem(item)) ||
                (removeOverleveledEnchantmentsEnabled && enchantedItems.hasOverleveledEnchantments(item));
    }

    private void alertAdmins(String message) {
        long currentTime = System.currentTimeMillis() / 1000;
        if (adminAlertsEnabled && currentTime - lastAdminAlertTime >= adminAlertCooldown) {
            lastAdminAlertTime = currentTime;
            for (Player player : Bukkit.getOnlinePlayers()) {
                if (player.hasPermission("oaexploits.alerts")) {
                    player.sendMessage(ChatColor.RED + message);
                }
            }
        }
    }

    private void logAndAlert(String message) {
        plugin.getLogger().info(message);
        alertAdmins(message);
    }

    public Set<Material> getIllegalItems() {
        return illegalItems;
    }

    public int getInventoryScanDepth() {
        return inventoryScanDepth;
    }

    public void reloadConfigValues() {
        loadConfigValues();
        plugin.getLogger().info("AntiIllegalItems configuration reloaded.");
    }
}
