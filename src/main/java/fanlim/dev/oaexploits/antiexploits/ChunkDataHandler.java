package fanlim.dev.oaexploits.antiexploits;

import fanlim.dev.oaexploits.Oaexploits;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.block.BlockState;
import org.bukkit.block.Container;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.ChestedHorse;
import org.bukkit.entity.Donkey;
import org.bukkit.entity.Player;
import org.bukkit.entity.minecart.StorageMinecart;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.Set;
import java.util.logging.Level;

public class ChunkDataHandler {

    private final Oaexploits plugin;
    private final Set<Material> illegalItems;
    private final int inventoryScanDepth;

    public ChunkDataHandler(Oaexploits plugin, Set<Material> illegalItems, int inventoryScanDepth) {
        this.plugin = plugin;
        this.illegalItems = illegalItems;
        this.inventoryScanDepth = inventoryScanDepth;
    }

    public void onChunkData(Chunk chunk) {
        boolean itemsRemoved = false;
        int containersCleared = 0;
        StringBuilder removedItemsReport = new StringBuilder();
        removedItemsReport.append("Removed illegal items from chunk ").append(chunk.toString()).append(": ");

        try {
            for (BlockState blockState : chunk.getTileEntities()) {
                if (blockState instanceof Container container) {
                    Inventory containerInventory = container.getInventory();
                    if (removeIllegalItems(containerInventory, inventoryScanDepth - 1)) {
                        itemsRemoved = true;
                        containersCleared++;
                        removedItemsReport.append("\nContainer at ").append(blockState.getX()).append(", ").append(blockState.getY()).append(", ").append(blockState.getZ()).append(": ");
                        for (ItemStack item : containerInventory.getContents()) {
                            if (item != null && isIllegalItem(item)) {
                                removedItemsReport.append(item.getType().toString()).append(" ");
                            }
                        }
                    }
                } else if (blockState instanceof ShulkerBox shulker) {
                    if (removeIllegalItems(shulker.getInventory(), inventoryScanDepth - 1)) {
                        itemsRemoved = true;
                        containersCleared++;
                        removedItemsReport.append("\nShulker Box at ").append(blockState.getX()).append(", ").append(blockState.getY()).append(", ").append(blockState.getZ()).append(": ");
                        for (ItemStack item : shulker.getInventory().getContents()) {
                            if (item != null && isIllegalItem(item)) {
                                removedItemsReport.append(item.getType().toString()).append(" ");
                            }
                        }
                    }
                }
            }

            for (org.bukkit.entity.Entity entity : chunk.getEntities()) {
                if (entity instanceof StorageMinecart storageMinecart) {
                    if (removeIllegalItems(storageMinecart.getInventory(), inventoryScanDepth - 1)) {
                        itemsRemoved = true;
                        containersCleared++;
                        removedItemsReport.append("\nStorage Minecart at ").append(storageMinecart.getLocation().getX()).append(", ").append(storageMinecart.getLocation().getY()).append(", ").append(storageMinecart.getLocation().getZ()).append(": ");
                        for (ItemStack item : storageMinecart.getInventory().getContents()) {
                            if (item != null && isIllegalItem(item)) {
                                removedItemsReport.append(item.getType().toString()).append(" ");
                            }
                        }
                    }
                } else if (entity instanceof ChestedHorse chestedHorse) {
                    if (removeIllegalItems(chestedHorse.getInventory(), inventoryScanDepth - 1)) {
                        itemsRemoved = true;
                        containersCleared++;
                        removedItemsReport.append("\nChested Horse at ").append(chestedHorse.getLocation().getX()).append(", ").append(chestedHorse.getLocation().getY()).append(", ").append(chestedHorse.getLocation().getZ()).append(": ");
                        for (ItemStack item : chestedHorse.getInventory().getContents()) {
                            if (item != null && isIllegalItem(item)) {
                                removedItemsReport.append(item.getType().toString()).append(" ");
                            }
                        }
                    }
                } else if (entity instanceof Donkey donkey) {
                    if (removeIllegalItems(donkey.getInventory(), inventoryScanDepth - 1)) {
                        itemsRemoved = true;
                        containersCleared++;
                        removedItemsReport.append("\nDonkey at ").append(donkey.getLocation().getX()).append(", ").append(donkey.getLocation().getY()).append(", ").append(donkey.getLocation().getZ()).append(": ");
                        for (ItemStack item : donkey.getInventory().getContents()) {
                            if (item != null && isIllegalItem(item)) {
                                removedItemsReport.append(item.getType().toString()).append(" ");
                            }
                        }
                    }
                }
            }

            if (itemsRemoved) {
                removedItemsReport.append("\nTotal containers cleared: ").append(containersCleared);
                logAndAlert(removedItemsReport.toString());
            }
        } catch (Exception e) {
            plugin.getLogger().log(Level.SEVERE, "Error processing chunk data: " + e.getMessage(), e);
        }
    }

    private boolean removeIllegalItems(Inventory inventory, int depth) {
        if (depth < 1) return false;

        boolean itemsRemoved = false;
        ItemStack[] contents = inventory.getContents();
        for (ItemStack item : contents) {
            if (item != null) {
                if (isIllegalItem(item)) {
                    removeItem(item);
                    itemsRemoved = true;
                } else if (item.getType().toString().endsWith("_SHULKER_BOX") && depth > 1) {
                    itemsRemoved |= removeShulkerBoxContents(item, depth);
                }
            }
        }
        inventory.setContents(contents);
        return itemsRemoved;
    }

    private boolean removeShulkerBoxContents(ItemStack item, int depth) {
        ItemMeta meta = item.getItemMeta();
        if (meta instanceof BlockStateMeta) {
            BlockStateMeta blockStateMeta = (BlockStateMeta) meta;
            BlockState blockState = blockStateMeta.getBlockState();
            if (blockState instanceof ShulkerBox shulker) {
                boolean nestedItemsRemoved = removeIllegalItems(shulker.getInventory(), depth - 1);
                if (nestedItemsRemoved) {
                    blockStateMeta.setBlockState(shulker);
                    item.setItemMeta(blockStateMeta);
                }
                return nestedItemsRemoved;
            }
        }
        return false;
    }

    private void removeItem(ItemStack item) {
        item.setAmount(0);
    }

    private boolean isIllegalItem(ItemStack item) {
        return item != null && illegalItems.contains(item.getType());
    }

    private void logAndAlert(String message) {
        plugin.getLogger().info(message);
        long currentTime = System.currentTimeMillis() / 1000;
        for (Player player : Bukkit.getOnlinePlayers()) {
            if (player.hasPermission("oaexploits.alerts")) {
                player.sendMessage(ChatColor.RED + message);
            }
        }
    }
}
