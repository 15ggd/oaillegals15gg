package fanlim.dev.oaexploits.antiexploits;

import fanlim.dev.oaexploits.Oaexploits;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.block.BlockState;
import org.bukkit.block.Container;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.ChestedHorse;
import org.bukkit.entity.Donkey;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.entity.minecart.StorageMinecart;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.Set;
import java.util.logging.Level;

public class ChunkDataHandler implements Listener {

    private final Oaexploits plugin;
    private final Set<Material> illegalItems;
    private final int inventoryScanDepth;

    public ChunkDataHandler(Oaexploits plugin, Set<Material> illegalItems, int inventoryScanDepth) {
        this.plugin = plugin;
        this.illegalItems = illegalItems;
        this.inventoryScanDepth = inventoryScanDepth;
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @EventHandler
    public void onChunkLoad(ChunkLoadEvent event) {
        onChunkData(event.getChunk());
    }

    public void onChunkData(Chunk chunk) {
        boolean itemsRemoved = false;
        int containersCleared = 0;
        StringBuilder removedItemsReport = new StringBuilder();
        removedItemsReport.append("Removed illegal items from chunk ").append(chunk).append(": ");

        try {
            for (BlockState blockState : chunk.getTileEntities()) {
                if (blockState instanceof Container container) {
                    if (processContainer(container.getInventory(), blockState.getX(), blockState.getY(), blockState.getZ(), removedItemsReport)) {
                        itemsRemoved = true;
                        containersCleared++;
                    }
                } else if (blockState instanceof ShulkerBox shulker) {
                    if (processContainer(shulker.getInventory(), blockState.getX(), blockState.getY(), blockState.getZ(), removedItemsReport)) {
                        itemsRemoved = true;
                        containersCleared++;
                    }
                }
            }

            for (org.bukkit.entity.Entity entity : chunk.getEntities()) {
                EntityType entityType = entity.getType();
                switch (entityType) {
                    case CHEST_MINECART -> {
                        StorageMinecart storageMinecart = (StorageMinecart) entity;
                        if (processContainer(storageMinecart.getInventory(), entity.getLocation().getX(), entity.getLocation().getY(), entity.getLocation().getZ(), removedItemsReport)) {
                            itemsRemoved = true;
                            containersCleared++;
                        }
                    }
                    case HORSE -> {
                        if (entity instanceof ChestedHorse chestedHorse) {
                            if (processContainer(chestedHorse.getInventory(), entity.getLocation().getX(), entity.getLocation().getY(), entity.getLocation().getZ(), removedItemsReport)) {
                                itemsRemoved = true;
                                containersCleared++;
                            }
                        }
                    }
                    case DONKEY -> {
                        Donkey donkey = (Donkey) entity;
                        if (processContainer(donkey.getInventory(), entity.getLocation().getX(), entity.getLocation().getY(), entity.getLocation().getZ(), removedItemsReport)) {
                            itemsRemoved = true;
                            containersCleared++;
                        }
                    }
                }
            }

            if (itemsRemoved) {
                removedItemsReport.append("\nTotal containers cleared: ").append(containersCleared);
                logAndAlert(removedItemsReport.toString());
            }
        } catch (Exception e) {
            plugin.getLogger().log(Level.SEVERE, "Error processing chunk data: " + e.getMessage(), e);
        }
    }

    private boolean processContainer(Inventory inventory, double x, double y, double z, StringBuilder removedItemsReport) {
        if (removeIllegalItems(inventory, inventoryScanDepth - 1)) {
            removedItemsReport.append("\nContainer at ").append(x).append(", ").append(y).append(", ").append(z).append(": ");
            for (ItemStack item : inventory.getContents()) {
                if (isIllegalItem(item)) {
                    removedItemsReport.append(item.getType()).append(" ");
                }
            }
            return true;
        }
        return false;
    }

    private boolean removeIllegalItems(Inventory inventory, int depth) {
        if (depth < 1) return false;

        boolean itemsRemoved = false;
        ItemStack[] contents = inventory.getContents();
        for (ItemStack item : contents) {
            if (item != null) {
                if (isIllegalItem(item)) {
                    removeItem(item);
                    itemsRemoved = true;
                } else if (item.getType().toString().endsWith("_SHULKER_BOX") && depth > 1) {
                    itemsRemoved |= removeShulkerBoxContents(item, depth);
                }
            }
        }
        inventory.setContents(contents);
        return itemsRemoved;
    }

    private boolean removeShulkerBoxContents(ItemStack item, int depth) {
        ItemMeta meta = item.getItemMeta();
        if (meta instanceof BlockStateMeta blockStateMeta) {
            BlockState blockState = blockStateMeta.getBlockState();
            if (blockState instanceof ShulkerBox shulker) {
                boolean nestedItemsRemoved = removeIllegalItems(shulker.getInventory(), depth - 1);
                if (nestedItemsRemoved) {
                    blockStateMeta.setBlockState(shulker);
                    item.setItemMeta(blockStateMeta);
                }
                return nestedItemsRemoved;
            }
        }
        return false;
    }

    private void removeItem(ItemStack item) {
        item.setAmount(0);
    }

    private boolean isIllegalItem(ItemStack item) {
        return item != null && illegalItems.contains(item.getType());
    }

    private void logAndAlert(String message) {
        plugin.getLogger().info(message);
        for (Player player : Bukkit.getOnlinePlayers()) {
            if (player.hasPermission("oaexploits.alerts")) {
                player.sendMessage(ChatColor.RED + message);
            }
        }
    }
}
