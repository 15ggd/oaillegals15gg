package fanlim.dev.oaexploits.antiexploits;

import fanlim.dev.oaexploits.Oaexploits;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.block.BlockState;
import org.bukkit.block.Container;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.world.ChunkLoadEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.ItemMeta;
import net.md_5.bungee.api.ChatColor;
import org.bukkit.configuration.file.FileConfiguration;

import java.util.Set;
import java.util.logging.Level;

public class ChunkDataHandler implements Listener {

    private final Oaexploits plugin;
    private final Set<Material> illegalItems;
    private int inventoryScanDepth;
    private boolean removeIllegalItems;
    private boolean removeIllegalsOnChunkLoad;

    public ChunkDataHandler(Oaexploits plugin, Set<Material> illegalItems, int inventoryScanDepth) {
        this.plugin = plugin;
        this.illegalItems = illegalItems;
        this.inventoryScanDepth = inventoryScanDepth;
        loadConfigValues();

        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    public void loadConfigValues() {
        FileConfiguration config = plugin.getConfig();
        this.removeIllegalItems = config.getBoolean("removal-options.remove-illegal-items", true);
        this.removeIllegalsOnChunkLoad = config.getBoolean("removal-options.remove-illegals-on-chunkload", false);
        this.inventoryScanDepth = config.getInt("removal-options.inventory-scan-depth", 3);
    }

    @EventHandler
    public void onChunkLoad(ChunkLoadEvent event) {
        if (removeIllegalsOnChunkLoad) {
            for (BlockState blockState : event.getChunk().getTileEntities()) {
                switch (blockState.getType()) {
                    case CHEST, TRAPPED_CHEST, BARREL, DISPENSER, DROPPER, HOPPER -> {
                        Container container = (Container) blockState;
                        processContainer(container.getInventory(), container.getX(), container.getY(), container.getZ());
                    }
                    case SHULKER_BOX -> {
                        ShulkerBox shulker = (ShulkerBox) blockState;
                        processContainer(shulker.getInventory(), shulker.getX(), shulker.getY(), shulker.getZ());
                    }
                    // Add other container types as needed
                }
            }
        }
    }

    @EventHandler
    public void onBlockPlace(BlockPlaceEvent event) {
        if (removeIllegalItems && event.getBlockPlaced().getState() instanceof ShulkerBox shulkerBox) {
            processContainer(shulkerBox.getInventory(), shulkerBox.getX(), shulkerBox.getY(), shulkerBox.getZ());
        }
    }

    @EventHandler
    public void onInventoryOpen(InventoryOpenEvent event) {
        if (!removeIllegalItems) return;

        Inventory inventory = event.getInventory();
        InventoryHolder holder = inventory.getHolder();

        if (holder != null) {
            switch (holder.getClass().getSimpleName()) {
                case "CraftContainer", "Container", "CraftChest", "CraftDispenser", "CraftDropper", "CraftHopper", "CraftBarrel" -> {
                    Container container = (Container) holder;
                    processContainer(container.getInventory(), container.getX(), container.getY(), container.getZ());
                }
                case "CraftShulkerBox", "ShulkerBox" -> {
                    ShulkerBox shulker = (ShulkerBox) holder;
                    processContainer(shulker.getInventory(), shulker.getX(), shulker.getY(), shulker.getZ());
                }
                default -> {
                    switch (inventory.getType()) {
                        case CHEST, SHULKER_BOX, DISPENSER, DROPPER, HOPPER, BARREL -> processContainer(inventory, event.getPlayer().getLocation().getX(), event.getPlayer().getLocation().getY(), event.getPlayer().getLocation().getZ());
                        // Add other inventory types as needed
                    }
                }
            }
        }
    }

    private void processContainer(Inventory inventory, double x, double y, double z) {
        StringBuilder removedItemsReport = new StringBuilder();
        removedItemsReport.append("Removed illegal items from container at ").append(x).append(", ").append(y).append(", ").append(z).append(": ");

        if (removeIllegalItems(inventory, inventoryScanDepth - 1, removedItemsReport)) {
            logAndAlert(removedItemsReport.toString());
        }
    }

    private boolean removeIllegalItems(Inventory inventory, int depth, StringBuilder removedItemsReport) {
        if (depth < 1) return false;

        boolean itemsRemoved = false;
        ItemStack[] contents = inventory.getContents();
        for (ItemStack item : contents) {
            if (item != null) {
                if (isIllegalItem(item)) {
                    removedItemsReport.append(item.getType()).append(" ");
                    removeItem(item);
                    itemsRemoved = true;
                    logIllegalItemRemoval(item);
                } else if (item.getType().toString().endsWith("_SHULKER_BOX") && depth > 1) {
                    itemsRemoved |= removeShulkerBoxContents(item, depth, removedItemsReport);
                }
            }
        }
        if (itemsRemoved) {
            inventory.setContents(contents);
        }
        return itemsRemoved;
    }

    private boolean removeShulkerBoxContents(ItemStack item, int depth, StringBuilder removedItemsReport) {
        ItemMeta meta = item.getItemMeta();
        if (meta instanceof BlockStateMeta blockStateMeta) {
            BlockState blockState = blockStateMeta.getBlockState();
            if (blockState instanceof ShulkerBox shulker) {
                boolean nestedItemsRemoved = removeIllegalItems(shulker.getInventory(), depth - 1, removedItemsReport);
                if (nestedItemsRemoved) {
                    blockStateMeta.setBlockState(shulker);
                    item.setItemMeta(blockStateMeta);
                }
                return nestedItemsRemoved;
            }
        }
        return false;
    }

    private void removeItem(ItemStack item) {
        item.setAmount(0);
    }

    private boolean isIllegalItem(ItemStack item) {
        return item != null && illegalItems.contains(item.getType());
    }

    private void logIllegalItemRemoval(ItemStack item) {
        plugin.getLogger().log(Level.INFO, "Illegal item removed: " + item.getType());
    }

    private void logAndAlert(String message) {
        plugin.getLogger().info(message);
        for (Player player : Bukkit.getOnlinePlayers()) {
            if (player.hasPermission("oaexploits.alerts")) {
                player.sendMessage(ChatColor.RED + message);
            }
        }
    }
}
