package fanlim.dev.oaexploits;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.block.BlockState;
import org.bukkit.block.Container;
import org.bukkit.block.ShulkerBox;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.block.Furnace;
import org.bukkit.block.Smoker;
import org.bukkit.block.BlastFurnace;
import org.bukkit.block.BlockState;
import org.bukkit.entity.ChestedHorse;
import org.bukkit.entity.Donkey;
import org.bukkit.entity.minecart.StorageMinecart;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.*;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
public class AntiIllegalItems implements Listener {

    private final Oaexploits plugin;
    private final Set<Material> illegalItems = ConcurrentHashMap.newKeySet();
    private final Set<UUID> onlinePlayers = ConcurrentHashMap.newKeySet();
    private int inventoryScanDepth;
    private boolean adminAlertsEnabled;
    private int adminAlertCooldown;
    private long lastAdminAlertTime;
    private boolean removeIllegalItemsEnabled;
    private boolean removeOverleveledEnchantmentsEnabled;

    public AntiIllegalItems(Oaexploits plugin) {
        this.plugin = plugin;
        loadConfigValues();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    private void loadConfigValues() {
        FileConfiguration config = plugin.getConfig();
        loadIllegalItems(config.getStringList("illegal-items.blocks"));
        loadIllegalItems(config.getStringList("illegal-items.items"));

        inventoryScanDepth = config.getInt("additional-configs.inventory-scan-depth", 3);
        adminAlertsEnabled = config.getBoolean("admin-alerts.enabled", true);
        adminAlertCooldown = config.getInt("admin-alerts.cooldown", 60);
        lastAdminAlertTime = 0;

        removeIllegalItemsEnabled = config.getBoolean("removal-options.remove-illegal-items", true);
        removeOverleveledEnchantmentsEnabled = config.getBoolean("removal-options.remove-overleveled-enchantments", true);
    }

    private void loadIllegalItems(List<String> itemNames) {
        for (String itemName : itemNames) {
            try {
                Material material = Material.valueOf(itemName.toUpperCase());
                illegalItems.add(material);
            } catch (IllegalArgumentException e) {
                plugin.getLogger().warning("Invalid item name in config: " + itemName);
            }
        }
    }

    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        handleItemInteraction(event.getCurrentItem(), event.getWhoClicked().getName());
    }

    @EventHandler
    public void onInventoryMoveItem(InventoryMoveItemEvent event) {
        handleItemMovement(event.getItem(), event.getSource(), event.getDestination());
    }

    @EventHandler
    public void onInventoryOpen(InventoryOpenEvent event) {
        handleInventoryOpen(event.getInventory(), event.getPlayer().getName());
    }

    @EventHandler
    public void onInventoryPickupItem(InventoryPickupItemEvent event) {
        handleItemInteraction(event.getItem().getItemStack(), "Container");
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        UUID playerId = event.getPlayer().getUniqueId();
        onlinePlayers.add(playerId);
        checkPlayerInventory(event.getPlayer());
    }

    @EventHandler
    public void onPlayerQuit(PlayerQuitEvent event) {
        onlinePlayers.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event) {
        handlePlayerInteract(event);
    }

    @EventHandler
    public void onPlayerItemHeld(PlayerItemHeldEvent event) {
        handleItemInteraction(event.getPlayer().getInventory().getItem(event.getNewSlot()), event.getPlayer().getName());
    }

    @EventHandler
    public void onPlayerDropItem(PlayerDropItemEvent event) {
        handleItemInteraction(event.getItemDrop().getItemStack(), event.getPlayer().getName());
    }

    @EventHandler
    public void onBlockPlace(BlockPlaceEvent event) {
        handleBlockPlace(event);
    }


    public void onChunkData(Chunk chunk) {
        boolean itemsRemoved = false;
        int containersCleared = 0;
        StringBuilder removedItemsReport = new StringBuilder();
        removedItemsReport.append("Removed illegal items from chunk ").append(chunk.toString()).append(": ");

        try {
            for (BlockState blockState : chunk.getTileEntities()) {
                if (blockState instanceof Container container) {
                    Inventory containerInventory = container.getInventory();
                    if (removeIllegalItems(containerInventory, inventoryScanDepth - 1)) {
                        itemsRemoved = true;
                        containersCleared++;
                        removedItemsReport.append("\nContainer at ").append(blockState.getX()).append(", ").append(blockState.getY()).append(", ").append(blockState.getZ()).append(": ");
                        for (ItemStack item : containerInventory.getContents()) {
                            if (item != null && isIllegalItem(item)) {
                                removedItemsReport.append(item.getType().toString()).append(" ");
                            }
                        }
                    }
                } else if (blockState instanceof ShulkerBox shulker) {
                    if (removeIllegalItems(shulker.getInventory(), inventoryScanDepth - 1)) {
                        itemsRemoved = true;
                        containersCleared++;
                        removedItemsReport.append("\nShulker Box at ").append(blockState.getX()).append(", ").append(blockState.getY()).append(", ").append(blockState.getZ()).append(": ");
                        for (ItemStack item : shulker.getInventory().getContents()) {
                            if (item != null && isIllegalItem(item)) {
                                removedItemsReport.append(item.getType().toString()).append(" ");
                            }
                        }
                    }
                }
            }

            for (org.bukkit.entity.Entity entity : chunk.getEntities()) {
                if (entity instanceof StorageMinecart storageMinecart) {
                    if (removeIllegalItems(storageMinecart.getInventory(), inventoryScanDepth - 1)) {
                        itemsRemoved = true;
                        containersCleared++;
                        removedItemsReport.append("\nStorage Minecart at ").append(storageMinecart.getLocation().getX()).append(", ").append(storageMinecart.getLocation().getY()).append(", ").append(storageMinecart.getLocation().getZ()).append(": ");
                        for (ItemStack item : storageMinecart.getInventory().getContents()) {
                            if (item != null && isIllegalItem(item)) {
                                removedItemsReport.append(item.getType().toString()).append(" ");
                            }
                        }
                    }
                } else if (entity instanceof ChestedHorse chestedHorse) {
                    if (removeIllegalItems(chestedHorse.getInventory(), inventoryScanDepth - 1)) {
                        itemsRemoved = true;
                        containersCleared++;
                        removedItemsReport.append("\nChested Horse at ").append(chestedHorse.getLocation().getX()).append(", ").append(chestedHorse.getLocation().getY()).append(", ").append(chestedHorse.getLocation().getZ()).append(": ");
                        for (ItemStack item : chestedHorse.getInventory().getContents()) {
                            if (item != null && isIllegalItem(item)) {
                                removedItemsReport.append(item.getType().toString()).append(" ");
                            }
                        }
                    }
                } else if (entity instanceof Donkey donkey) {
                    // Check if the donkey has items in its inventory
                    if (donkey.getInventory().getSize() > 0 && removeIllegalItems(donkey.getInventory(), inventoryScanDepth - 1)) {
                        itemsRemoved = true;
                        containersCleared++;
                        removedItemsReport.append("\nDonkey at ").append(donkey.getLocation().getX()).append(", ").append(donkey.getLocation().getY()).append(", ").append(donkey.getLocation().getZ()).append(": ");
                        for (ItemStack item : donkey.getInventory().getContents()) {
                            if (item != null && isIllegalItem(item)) {
                                removedItemsReport.append(item.getType().toString()).append(" ");
                            }
                        }
                    }
                }
            }

            if (itemsRemoved) {
                removedItemsReport.append("\nTotal containers cleared: ").append(containersCleared);
                logAndAlert(removedItemsReport.toString());
            }
        } catch (Exception e) {
            plugin.getLogger().log(Level.SEVERE, "Error processing chunk data: " + e.getMessage(), e);
        }
    }


    private void handleItemInteraction(ItemStack item, String playerName) {
        if (item != null && shouldRemoveItem(item)) {
            removeItem(item);
            alertAdmins(playerName + " tried to interact with an illegal item: " + item.getType());
        }
    }

    private void handleItemMovement(ItemStack item, Inventory source, Inventory destination) {
        if (item != null && shouldRemoveItem(item)) {
            removeItem(item);
            alertAdmins("Container tried to move an illegal item: " + item.getType());
        }
        removeIllegalItems(source, inventoryScanDepth);
        removeIllegalItems(destination, inventoryScanDepth);
    }

    private void handleInventoryOpen(Inventory inventory, String playerName) {
        boolean itemsRemoved = removeIllegalItems(inventory, inventoryScanDepth);
        if (itemsRemoved) {
            alertAdmins(playerName + " had illegal items removed from a container.");
        }
    }

    private void handlePlayerInteract(PlayerInteractEvent event) {
        Action action = event.getAction();
        Player player = event.getPlayer();
        ItemStack item = event.getItem();

        if (isRightOrLeftClick(action) && player.isSneaking() && item != null && item.getType().toString().endsWith("_SHULKER_BOX")) {
            BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
            if (meta != null && meta.getBlockState() instanceof ShulkerBox shulker) {
                removeIllegalItems(shulker.getInventory(), inventoryScanDepth - 1);
                meta.setBlockState(shulker);
                item.setItemMeta(meta);
            }
        }
    }

    private boolean isRightOrLeftClick(Action action) {
        return action == Action.RIGHT_CLICK_BLOCK || action == Action.RIGHT_CLICK_AIR ||
                action == Action.LEFT_CLICK_BLOCK || action == Action.LEFT_CLICK_AIR;
    }

    private void handleBlockPlace(BlockPlaceEvent event) {
        Player player = event.getPlayer();
        ItemStack item = event.getItemInHand();
        Material blockType = event.getBlock().getType();

        if (shouldRemoveItem(item) && blockType != Material.END_PORTAL_FRAME && blockType != Material.END_PORTAL) {
            removeItem(item);
            alertAdmins(player.getName() + " tried to place an illegal item: " + item.getType());
        } else if (item.getType().toString().endsWith("_SHULKER_BOX")) {
            BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
            if (meta != null && meta.getBlockState() instanceof ShulkerBox shulker) {
                removeIllegalItems(shulker.getInventory(), inventoryScanDepth - 1);
                meta.setBlockState(shulker);
                item.setItemMeta(meta);
            }
        }
    }

    private void checkPlayerInventory(Player player) {
        boolean itemsRemoved = removeIllegalItems(player.getInventory(), inventoryScanDepth);
        if (itemsRemoved) {
            alertAdmins(player.getName() + " had illegal items removed from their inventory.");
        }
    }

    private boolean removeIllegalItems(Inventory inventory, int depth) {
        if (depth < 1) return false;

        boolean itemsRemoved = false;
        ItemStack[] contents = inventory.getContents();
        for (ItemStack item : contents) {
            if (item != null) {
                if (shouldRemoveItem(item)) {
                    removeItem(item);
                    itemsRemoved = true;
                } else if (item.getType().toString().endsWith("_SHULKER_BOX") && depth > 1) {
                    itemsRemoved |= removeShulkerBoxContents(item, depth);
                }
            }
        }
        inventory.setContents(contents);
        return itemsRemoved;
    }

    private boolean removeShulkerBoxContents(ItemStack item, int depth) {
        BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
        if (meta != null && meta.getBlockState() instanceof ShulkerBox shulker) {
            boolean nestedItemsRemoved = removeIllegalItems(shulker.getInventory(), depth - 1);
            if (nestedItemsRemoved) {
                meta.setBlockState(shulker);
                item.setItemMeta(meta);
            }
            return nestedItemsRemoved;
        }
        return false;
    }

    private void removeItem(ItemStack item) {
        item.setAmount(0);
    }

    private boolean isIllegalItem(ItemStack item) {
        return item != null && illegalItems.contains(item.getType());
    }

    private boolean shouldRemoveItem(ItemStack item) {
        return (removeIllegalItemsEnabled && isIllegalItem(item)) ||
                (removeOverleveledEnchantmentsEnabled && hasOverleveledEnchantments(item));
    }

    private boolean hasOverleveledEnchantments(ItemStack item) {
        ItemMeta meta = item.getItemMeta();
        if (meta != null && meta.hasEnchants()) {
            for (Map.Entry<Enchantment, Integer> enchantment : meta.getEnchants().entrySet()) {
                if (enchantment.getValue() > enchantment.getKey().getMaxLevel()) {
                    return true;
                }
            }
        }
        return false;
    }

    private void alertAdmins(String message) {
        long currentTime = System.currentTimeMillis() / 1000;
        if (adminAlertsEnabled && currentTime - lastAdminAlertTime >= adminAlertCooldown) {
            lastAdminAlertTime = currentTime;
            for (Player player : Bukkit.getOnlinePlayers()) {
                if (player.hasPermission("oaexploits.alerts")) {
                    player.sendMessage(ChatColor.RED + message);
                }
            }
        }
    }

    private void logAndAlert(String message) {
        plugin.getLogger().info(message);
        alertAdmins(message);
    }

}
