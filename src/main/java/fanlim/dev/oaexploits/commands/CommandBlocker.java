package fanlim.dev.oaexploits.commands;

import fanlim.dev.oaexploits.Oaexploits;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerCommandSendEvent;

import java.util.Set;
import java.util.stream.Collectors;

public class CommandBlocker implements Listener {

    private final Oaexploits plugin;

    public CommandBlocker(Oaexploits plugin) {
        this.plugin = plugin;
    }

    @EventHandler
    public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event) {
        String message = event.getMessage().toLowerCase();
        String command = message.split(" ")[0].replaceAll("^/+", "");

        // Check if the player is an operator
        if (event.getPlayer().isOp()) {
            return; // Allow operators to use all commands
        }

        // Check whitelist
        if (plugin.isWhitelistEnabled() && !plugin.getCommandWhitelist().contains(command)) {
            event.setCancelled(true);
            logAttempt(event.getPlayer().getName(), command, "whitelist");
            return;
        }

        // Check blacklist
        if (plugin.isBlacklistEnabled() && plugin.getCommandBlacklist().contains(command)) {
            event.setCancelled(true);
            logAttempt(event.getPlayer().getName(), command, "blacklist");
            return;
        }

        // Block /plugins command and similar
        if (isPluginsCommand(command)) {
            event.setCancelled(true);
            event.getPlayer().sendMessage(plugin.getPluginsCommandBlockedMessage() + "\nPlugins (0): []");
            logAttempt(event.getPlayer().getName(), command, "plugins command");
        }
    }

    @EventHandler
    public void onPlayerCommandSend(PlayerCommandSendEvent event) {
        if (plugin.isWhitelistEnabled() && !event.getPlayer().isOp()) {
            Set<String> whitelistedCommands = plugin.getCommandWhitelist().stream()
                    .map(command -> command.startsWith("/") ? command.substring(1) : command)
                    .collect(Collectors.toSet());

            event.getCommands().removeIf(command -> !whitelistedCommands.contains(command.toLowerCase()));
        }
    }

    private boolean isPluginsCommand(String command) {
        return command.equalsIgnoreCase("plugins") ||
                command.equalsIgnoreCase("pl") ||
                command.equalsIgnoreCase("bukkit:plugins") ||
                command.equalsIgnoreCase("bukkit:pl") ||
                command.equalsIgnoreCase("bukkit:?") ||
                command.equalsIgnoreCase("bukkit:help") ||
                command.equalsIgnoreCase(".plugins");
    }

    private void logAttempt(String playerName, String command, String type) {
        if (plugin.isDebugEnabled()) {
            plugin.getLogger().info("Player " + playerName + " tried to execute blocked " + type + " command: " + command);
        }
    }
}
